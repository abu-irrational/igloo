#-------------------------------------------------------------------------
# TITLE:
#    igloo.test
#
# PROJECT:
#    igloo: Your project description
#
# DESCRIPTION:
#    igloo: Test Suite
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# Load the tcltest package

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.3
    eval ::tcltest::configure $argv
}

namespace import ::tcltest::test

#-------------------------------------------------------------------------
# Load the package to be tested

source ../../lib/igloo/pkgModules.tcl

#-------------------------------------------------------------------------
# Setup and Cleanup

proc cleanup {} {
    catch {::dog destroy}
    catch {::animal destroy}
}

#-------------------------------------------------------------------------
# igloo::class create

test class_create-1.1 {igloo::class creates igloo classes} -body {
    igloo::class create ::dog
    # Every igloo::class has _staticInit.
    expr {"_staticInit" in [info class methods ::dog -private]}
} -cleanup {
    cleanup
} -result {1}

test class_create-1.2 {igloo::class returns the fully-qualified class name} -body {
    namespace eval ::test:: { 
        igloo::class create dog
    }
} -cleanup {
    cleanup
} -result {::test::dog}



#-------------------------------------------------------------------------
# igloo::define method

# 1.*: Error Cases

# TBD: Improve error message?
test define-1.1 {no such class} -body {
    igloo::define ::dog method bark {} { return "Woof" }
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {::dog does not refer to an object}

test define-1.2 {only works with igloo::classes} -body {
    oo::class create ::dog
    igloo::define ::dog method bark {} { return "Woof" }
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {igloo::define on non-igloo class: "::dog"}

# 2.*: Basic Operation

test define-2.1 {define with subcommand} -body {
    igloo::class create ::dog
    igloo::define ::dog method bark {} { return "Woof" }
    expr {"bark" in [info class methods ::dog]}
} -cleanup {
    cleanup
} -result {1}

test define-2.2 {define with script} -body {
    igloo::class create ::dog
    igloo::define ::dog {
        method bark {} { return "Woof" }
        method wag  {} { return "Wag"  }
    }
    list \
        [expr {"bark" in [info class methods ::dog]}] \
        [expr {"wag"  in [info class methods ::dog]}]
} -cleanup {
    cleanup
} -result {1 1}

test define-2.3 {define with unqualified class name.} -body {
    igloo::class create ::dog
    igloo::define dog {
        method bark {} { return "Woof" }
        method wag  {} { return "Wag"  }
    }
    list \
        [expr {"bark" in [info class methods ::dog]}] \
        [expr {"wag"  in [info class methods ::dog]}]
} -cleanup {
    cleanup
} -result {1 1}


#-------------------------------------------------------------------------
# igloo::define constructor

# 1.*: Errors

# None yet

# 2.*: Basic Operation

test define_constructor-2.1 {defines constructor} -body {
    igloo::class create ::dog
    igloo::define ::dog constructor {theName} {
        my variable name
        set name $theName
    }
    igloo::define ::dog method name {} {
        my variable name
        return $name
    }

    dog create spot "Spot"
    spot name
} -cleanup {
    cleanup
} -result {Spot}

test define_constructor-2.2 {constructor calls _staticInit} -body {
    igloo::class create ::dog {
        variable name "Fred"
        constructor {} {
            # Nothing
        }
        method name {} {
            return $name
        }
    }

    dog create mydog
    mydog name
} -cleanup {
    cleanup
} -result {Fred}

#-------------------------------------------------------------------------
# igloo::define method

# 1.*: Errors

# None yet

# 2.*: Basic Operation

test define_method-2.1 {defines a method} -body {
    igloo::class create ::dog
    igloo::define ::dog method bark {} {
        return "Bark bark."
    }

    dog create spot
    spot bark
} -cleanup {
    cleanup
} -result {Bark bark.}


#-------------------------------------------------------------------------
# igloo::define superclass

# 1.*: Error Effects

# 2.*: Basic Operation

test define_superclass-2.1 {can subclass another igloo::class} -body {
    igloo::class create ::animal {
        method bark {} { return "Bark." }
    }

    igloo::class create ::dog {
        superclass ::animal
        method wag {} { return "Wag." }
    }
    ::dog create fido 
    list [fido bark] [fido wag]
} -cleanup {
    cleanup
} -result {Bark. Wag.}

test define_superclass-2.2 {can subclass an oo::class} -body {
    oo::class create ::animal {
        method bark {} { return "Bark." }
    }

    igloo::class create ::dog {
        superclass ::animal
        method wag {} { return "Wag." }
    }
    ::dog create fido 
    list [fido bark] [fido wag]
} -cleanup {
    cleanup
} -result {Bark. Wag.}

test define_superclass-2.3 {oo::class can subclass igloo::class} -body {
    igloo::class create ::animal {
        variable breed mutt
    }

    oo::class create ::dog {
        superclass ::animal
        method breed {} {
            my variable breed 
            return $breed 
        }
    }
    ::dog create fido 
    fido breed
} -cleanup {
    cleanup
} -result {mutt}

#-------------------------------------------------------------------------
# igloo::define variable

# 1.*: Errors

# TBD: Improve error message?
test define_variable-1.1 {no variable name} -body {
    igloo::class create ::dog
    igloo::define ::dog variable
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {wrong # args: should be "variable name ?arg ...?"}

# TBD: Add declaration syntax checks

# 2.*: basic operations

test define_variable-2.1 {variable declares variable} -body {
    igloo::class create ::dog {
        variable name
        constructor {} { set name "Fido" }
        method name {} { return $name    }
    }
    ::dog create fido 
    fido name
} -cleanup {
    cleanup
} -result {Fido}

test define_variable-2.2 {variable initializes variable with empty string} -body {
    igloo::class create ::dog {
        variable name
        method name {} { return "*$name*" }
    }
    ::dog create fido 
    fido name
} -cleanup {
    cleanup
} -result {**}

test define_variable-2.3 {variable initializes variable with value} -body {
    igloo::class create ::dog {
        variable name "Fido"
        method name {} { return "*$name*" }
    }
    ::dog create fido
    fido name
} -cleanup {
    cleanup
} -result {*Fido*}

test define_variable-2.4 {variable initializes variable with array value} -body {
    igloo::class create ::dog {
        variable data -array {
            name "Fido"
            color "brown"
        }
        method data {} { return [array get data] }
    }
    ::dog create fido 
    fido data
} -cleanup {
    cleanup
} -result {name Fido color brown}

# 3.*: inheritance effects

test define_variable-3.1 {parent class vars are initialized} -body {
    igloo::class create ::animal {
        variable name "Joe"

        method name {} { return $name }
    }

    igloo::class create ::dog {
        superclass ::animal
        variable breed "mutt" 

        method breed {} { return $breed }
    }
    ::dog create fido 
    list [fido name] [fido breed]
} -cleanup {
    cleanup
} -result {Joe mutt}

test define_variable-3.2 {child class vars override superclass vars} -body {
    igloo::class create ::animal {
        variable name "Joe"

        method name {} { return $name }
    }

    igloo::class create ::dog {
        superclass ::animal
        variable name "Fido"
    }
    ::dog create fido 
    fido name
} -cleanup {
    cleanup
} -result {Fido}

#-------------------------------------------------------------------------
# Cleanup

::tcltest::cleanupTests
